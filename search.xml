<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>运营学习资料</title>
      <link href="/2024/12/10/yun-ying-xue-xi-zi-liao/"/>
      <url>/2024/12/10/yun-ying-xue-xi-zi-liao/</url>
      
        <content type="html"><![CDATA[<p>本页面用来整理收集一些运营相关的学习资料。</p><h2 id="哔哩哔哩"><a href="#哔哩哔哩" class="headerlink" title="哔哩哔哩"></a>哔哩哔哩</h2><p><a href="https://www.bilibili.com/video/BV1wh411v7rb/?share_source=copy_web&amp;vd_source=959dd2e75de021f36e15a2ecd0b69109">【零基础新媒体运营入门课程】</a></p><p><a href="https://www.bilibili.com/video/BV1FS421d7LU/?share_source=copy_web&amp;vd_source=959dd2e75de021f36e15a2ecd0b69109">【2024年干货的新媒体运营教程，小红书运营系统课，抖音短视频零基础入门到精通！】 </a></p><h2 id="我要自学网"><a href="#我要自学网" class="headerlink" title="我要自学网"></a>我要自学网</h2><p><a href="https://www.51zxw.net/list.aspx?cid=1339">【自媒体短视频创业运营教程】</a></p><p><a href="https://www.51zxw.net/list.aspx?cid=1287">【微信公众号全能实战运营教程】</a></p><p><a href="https://www.51zxw.net/list.aspx?cid=1163">【快手运营入门到精通教程】</a></p><p><a href="https://www.51zxw.net/list.aspx?cid=1125">【抖音直播运营教程】</a></p><p><a href="https://www.51zxw.net/list.aspx?cid=1092">【小红书运营入门到精通教程】</a></p><p><a href="https://www.51zxw.net/list.aspx?cid=1068">【抖音运营入门到精通教程】</a></p>]]></content>
      
      
      <categories>
          
          <category> Operation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operation </tag>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始搭建一个wireguard环境</title>
      <link href="/2024/12/04/vpn-wireguard-01/"/>
      <url>/2024/12/04/vpn-wireguard-01/</url>
      
        <content type="html"><![CDATA[<p>本篇文章根据一个具体的案例，介绍如何从0开始搭建一个wireguard服务端环境（例如：SERVER01），并配置两台客户端(PCA、PCB)异地互联（在整个互联网内实现一个大局域网）：</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>vpn</strong>：虚拟专用通道；</p><p><strong>wireguard</strong>：linux内置的一个vpn工具；</p><p><strong>网卡</strong>(有线/无线)：客户端/服务器用来连接网络的硬件设备；</p><p><strong>虚拟网卡</strong>：由软件模拟出来的网卡，功能和网卡类似（也能实现上网功能），一台电脑可以虚拟出来多张虚拟网卡；</p><p><strong>ip地址</strong>：</p><ul><li>私有ipv4地址：<ul><li>A类地址: 10.0.0.0 - 10.255.255.255，子网掩码:10.0.0.0/8，数量:1677 万个</li><li>B类地址: 172.16.0.0 - 172.31.255.255，子网掩码:255.240.0.0/12，数量:104 万个</li><li>C类地址: 192.168.0.0 - 192.168.255.255，子网掩码:255.255.0.0/16，数量:65536个</li></ul></li><li>私有ipv6地址：<ul><li>fc00::/7类: fc00:: 到 fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</li><li>fe80::/64类:这是链路本地地址范围，仅用于同一链路上的设备之间的通信。</li></ul></li><li>公网ip地址：一台可以访问互联网的设备，并且具有非私有网段的ip地址</li></ul><h3 id="达成目标"><a href="#达成目标" class="headerlink" title="达成目标"></a>达成目标</h3><ol><li>PCA和PCB可以通讯，并且可以访问互联网</li><li>PCA依然可以访问局域网内设备(例如：PC01、phone01等)</li></ol><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p>真实网络拓扑图：<br><img src="https://alist.anliu.site/d/alist-ali/wireguard-install-01.png"></p><p>wireguard环境拓扑图(大局域网)：<br><img src="https://alist.anliu.site/d/alist-ali/wireguard-install-02.png"></p><p>SERVER01：</p><ul><li>可访问互联网，并有公网ip</li><li>安装了wireguard服务端环境，并配置了大局域网的网段为：172.16.0.x (相当于子网掩码/24)</li><li>分配给PCA的虚拟网卡的地址（二维码/配置文件）为：172.16.0.2</li><li>分配给PCA的虚拟网卡的地址（二维码/配置文件）为：172.16.0.3</li></ul><p>PCA（Mac系统）：</p><ul><li>可以访问互联网即可(无需公网ip)</li><li>路由器分配了局域网ip地址(例如：192.168.0.22)</li><li>安装wireguard客户端</li></ul><p>PCB（Win系统）：</p><ul><li>可以访问互联网即可(无需公网ip)</li><li>路由器分配了局域网ip地址(例如：192.168.0.22)</li><li>安装wireguard客户端</li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>easy-wireguard-docker-compose.yml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.8"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">wg-easy-net:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wg-easy:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LANG=chs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_HOST=127.0.0.1</span></span><br><span class="line">      <span class="comment"># 下面密码是：foobar123</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PASSWORD_HASH=$$2y$$10$$hBCoykrB95WSzuV4fafBzOHWKu9sbyVa34GJr8VV5R/pIelfEMYyG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PORT=51821</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_PORT=51820</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_DEFAULT_ADDRESS=172.16.0.x</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_DEFAULT_DNS=8.8.8.8,</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_ALLOWED_IPS=0.0.0.0/0,</span> <span class="string">::/0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_PERSISTENT_KEEPALIVE=30</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nas.anliu.space:10000/wg-easy/wg-easy:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wg-easy</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/etc/wireguard</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"51820:51820/udp"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"51821:51821/tcp"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYS_MODULE</span></span><br><span class="line">    <span class="attr">sysctls:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net.ipv4.ip_forward=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net.ipv4.conf.all.src_valid_mark=1</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wg-easy-net</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>首先安装docker和docker-compose环境，然后执行命令：</p><p><code>docker-compose -f easy-wireguard-docker-compose.yml up -d</code></p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><h4 id="1-在浏览器打开ip-51821-例如：x-x-x-x-51821-地址，如下："><a href="#1-在浏览器打开ip-51821-例如：x-x-x-x-51821-地址，如下：" class="headerlink" title="1. 在浏览器打开ip:51821( 例如：x.x.x.x:51821 )地址，如下："></a>1. 在浏览器打开ip:51821( 例如：x.x.x.x:51821 )地址，如下：</h4><p><img src="https://alist.anliu.site/d/alist-ali/wireguard-install-03.png"></p><h4 id="2-新建并下载配置文件（PCA-conf、PCB-conf）"><a href="#2-新建并下载配置文件（PCA-conf、PCB-conf）" class="headerlink" title="2. 新建并下载配置文件（PCA.conf、PCB.conf）"></a>2. 新建并下载配置文件（PCA.conf、PCB.conf）</h4><p><img src="https://alist.anliu.site/d/alist-ali/wireguard-install-04.png"></p><p><img src="https://alist.anliu.site/d/alist-ali/wireguard-install-05.png"></p><p>配置信息一般如下(把ip替换成自己的服务器公网ip)：</p><p><code>PCA.conf</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey = SLRWKG1qHsu4WZURw3mNsa5D7Q40fsiaGpCwmBF5M38=</span><br><span class="line">Address = 172.16.0.2/24</span><br><span class="line">DNS = 8.8.8.8, 8.8.4.4</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = waOr+X1HT5LnLJd4wo1xEr2scN0oyhNNQWqGv2zO2TE=</span><br><span class="line">PresharedKey = 9P/aw4uBZysfAylToAd59QKm599ob5twZQOpjRCROQQ=</span><br><span class="line">AllowedIPs = 0.0.0.0/0, ::/0</span><br><span class="line">PersistentKeepalive = 30</span><br><span class="line">Endpoint = 100.12.2.1:51820</span><br></pre></td></tr></tbody></table></figure><p><code>PCB.conf</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Interface]</span><br><span class="line">PrivateKey = mOf7+7qHQZXt9AqhS8oykC81tgtGMTPhpN4HJ7MJaGU=</span><br><span class="line">Address = 172.16.0.3/24</span><br><span class="line">DNS = 8.8.8.8, 8.8.4.4</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = waOr+X1HT5LnLJd4wo1xEr2scN0oyhNNQWqGv2zO2TE=</span><br><span class="line">PresharedKey = MBgIcMJZ8WpeFvN3FR3t5VeqDQZdbNJZMIrHgja7zlY=</span><br><span class="line">AllowedIPs = 0.0.0.0/0, ::/0</span><br><span class="line">PersistentKeepalive = 30</span><br><span class="line">Endpoint = 100.12.2.1:51820</span><br></pre></td></tr></tbody></table></figure><h4 id="3-到wireguard官网下载并安装wireguard客户端"><a href="#3-到wireguard官网下载并安装wireguard客户端" class="headerlink" title="3. 到wireguard官网下载并安装wireguard客户端"></a>3. 到<a href="https://www.wireguard.com/install/" title="wireguard官网">wireguard官网</a>下载并安装wireguard客户端</h4><p>打开界面如下</p><p><img src="https://alist.anliu.site/d/alist-ali/wireguard-install-06.png"></p><p>在PCA客户端导入<code>PCA.conf</code>，点击连接，此时PCA电脑会由wireguard创建一个虚拟网卡，并且所有的网络访问请求都会走这张虚拟网卡。</p><p><img src="https://alist.anliu.site/d/alist-ali/wireguard-install-07.png"></p><p>在PCB客户端导入<code>PCB.conf</code>，点击连接，此时PCB电脑会由wireguard创建一个虚拟网卡，并且所有的网络访问请求都会走这张虚拟网卡。</p><p><img src="https://alist.anliu.site/d/alist-ali/wireguard-install-08.png"></p><h4 id="4-额外配置"><a href="#4-额外配置" class="headerlink" title="4. 额外配置"></a>4. 额外配置</h4><p>   此时产生一个问题，访问的网络受SERVER01可访问的网络限制，SERVER01无法访问的，PCA和PCB也无法访问。<br>   解释下：PCA的所有网络请求都会走wireguard的虚拟网卡，即所有的请求都会经过<code>SERVER01</code>绕一次，由于<code>SERVER01</code>存在于公网上，那么PCA就会无法访问本地局域网的ip地址，例如PCA无法访问本地的192.0.0.x系列的设备，怎么解决这个问题呢？</p><p>   解决办法：</p><p>   手动配置本地网络访问规则，让所有192.168.0.x的网站都走本地网卡，其他的地址则走wireguard的虚拟网卡。</p><p>   这里举例，例如PCA为MAC苹果电脑，执行以下脚本命令行：</p><p>   <code>addLocalRouter.sh</code>（可以直接写入一个脚本文件中）</p>   <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">route add -net 192.0.0.0 -netmask 255.0.0.0 192.168.0.1</span><br></pre></td></tr></tbody></table></figure><p>   删除脚本如下：</p><p>   <code>deleteLocalRouter.sh</code>（可以直接写入一个脚本文件中）</p>   <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">route delete -net 192.0.0.0 -netmask 255.0.0.0 192.168.0.1</span><br></pre></td></tr></tbody></table></figure><p>至此，你已经成功构建了一个公网范围内的“大局域网”，可以测试下：</p><ul><li>PCA客户端去ping PCB客户端</li><li>PCB客户端去ping PCA客户端</li><li>PCA和PCB去ping SERVER01</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> wireguard </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>designable源码学习</title>
      <link href="/2024/12/04/designable-yuan-ma-xue-xi/"/>
      <url>/2024/12/04/designable-yuan-ma-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>designable+formily是一个低代码平台的解决方案，代码比较优秀，值得深入学习。</p><h2 id="项目源码阅读顺序"><a href="#项目源码阅读顺序" class="headerlink" title="项目源码阅读顺序"></a>项目源码阅读顺序</h2><ol><li>先看项目结构</li><li>先看工具函数(shared)</li><li>再看核心代码(core)</li><li>最后看示例项目(examples)</li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h2 id="项目源码阅读"><a href="#项目源码阅读" class="headerlink" title="项目源码阅读"></a>项目源码阅读</h2><h3 id="工具函数-shared"><a href="#工具函数-shared" class="headerlink" title="工具函数(shared)"></a>工具函数(shared)</h3><h3 id="核心代码-core"><a href="#核心代码-core" class="headerlink" title="核心代码(core)"></a>核心代码(core)</h3><h4 id="1-drivers"><a href="#1-drivers" class="headerlink" title="1. drivers"></a>1. drivers</h4><p>描述：包含了所有的DOM事件进行交互的事件驱动。注册事件、移除事件、发数据。</p><h4 id="2-effects"><a href="#2-effects" class="headerlink" title="2. effects"></a>2. effects</h4><p>描述：核心逻辑，注重业务逻辑，完全不需要关系DOM级别，<br>data-content-editable=”x-component-props.title”表示组件的title属性可以编辑。</p><h4 id="3-events"><a href="#3-events" class="headerlink" title="3. events"></a>3. events</h4><p>描述：</p><h4 id="4-models"><a href="#4-models" class="headerlink" title="4. models"></a>4. models</h4><p>描述：</p><h4 id="5-shortcuts"><a href="#5-shortcuts" class="headerlink" title="5. shortcuts"></a>5. shortcuts</h4><p>描述：</p><h4 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h4><p>描述：</p><h3 id="示例项目-examples"><a href="#示例项目-examples" class="headerlink" title="示例项目(examples)"></a>示例项目(examples)</h3>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 博客 </tag>
            
            <tag> frontend </tag>
            
            <tag> designable </tag>
            
            <tag> formily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NginxProxyManager泛域名SSL证书</title>
      <link href="/2024/12/03/nginxproxymanager-fan-yu-ming/"/>
      <url>/2024/12/03/nginxproxymanager-fan-yu-ming/</url>
      
        <content type="html"><![CDATA[<p>使用NginxProxyManager生成免费SSL泛域名证书（例如*.xxx.com格式的SSL证书），则该证书在xxx.com及其所有子域名下（例如:xx.xxx.com）都可以使用。</p><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li>有公网ip的服务器一台（要求可以使用80、443端口，因为NginxProxyManager要用到）</li><li>安装NginxProxyManager（我是在服务器环境用docker的方式安装的）</li><li>域名一枚（我在腾讯云购买了 “anliu.site” 的域名）</li></ul><h2 id="设置域名和ip地址的解析"><a href="#设置域名和ip地址的解析" class="headerlink" title="设置域名和ip地址的解析"></a>设置域名和ip地址的解析</h2><p>在域名解析页面，配置域名和服务器公网ip的映射关系<br><img src="https://alist.anliu.site/d/alist-ali/domain-config-01.png"></p><h2 id="安装NginxProxyManager"><a href="#安装NginxProxyManager" class="headerlink" title="安装NginxProxyManager"></a>安装NginxProxyManager</h2><p>docker compose环境自寻搜索，我的compose的文件如下：</p><p><code>docker-compose-nginx-proxy-manager.yml</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">nginx-net:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx-proxy-manager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'nas.anliu.space:10000/jc21/nginx-proxy-manager:latest'</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx-proxy-manager</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">nginx-proxy-manager</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx-net</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'81:81'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'443:443'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># Mysql/Maria connection parameters:</span></span><br><span class="line">      <span class="attr">DB_MYSQL_HOST:</span> <span class="string">"mariadb"</span></span><br><span class="line">      <span class="attr">DB_MYSQL_PORT:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">DB_MYSQL_USER:</span> <span class="string">"stone"</span></span><br><span class="line">      <span class="attr">DB_MYSQL_PASSWORD:</span> <span class="string">"2090@Database"</span></span><br><span class="line">      <span class="attr">DB_MYSQL_NAME:</span> <span class="string">"npm"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mariadb</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mariadb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'nas.anliu.space:10000/mariadb:latest'</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx-net</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MARIADB_ROOT_PASSWORD:</span> <span class="string">'2090@Database'</span></span><br><span class="line">      <span class="attr">MARIADB_DATABASE:</span> <span class="string">'npm'</span></span><br><span class="line">      <span class="attr">MARIADB_USER:</span> <span class="string">'stone'</span></span><br><span class="line">      <span class="attr">MARIADB_PASSWORD:</span> <span class="string">'2090@Database'</span></span><br><span class="line">      <span class="attr">MARIADB_AUTO_UPGRADE:</span> <span class="string">'1'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mariadb:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'3306:3306'</span></span><br></pre></td></tr></tbody></table></figure><p>安装完毕，打开域名解析对应的服务器网址（我的是<strong><a href="https://www.anliu.site/">https://www.anliu.site</a></strong> ），界面如下：<br><img src="https://alist.anliu.site/d/alist-ali/nginx-proxy-config-01.png"></p><h2 id="配置SSL泛域名证书"><a href="#配置SSL泛域名证书" class="headerlink" title="配置SSL泛域名证书"></a>配置SSL泛域名证书</h2><h3 id="打开配置面板（我的是-https-www-anliu-site-）"><a href="#打开配置面板（我的是-https-www-anliu-site-）" class="headerlink" title="打开配置面板（我的是 https://www.anliu.site ）"></a>打开配置面板（我的是 <strong><a href="https://www.anliu.site/">https://www.anliu.site</a></strong> ）</h3><p><img src="https://alist.anliu.site/d/alist-ali/nginx-proxy-config-02.png"></p><p><img src="https://alist.anliu.site/d/alist-ali/nginx-proxy-config-03.png"></p><p><img src="https://alist.anliu.site/d/alist-ali/nginx-proxy-config-04.png"></p><h3 id="使用泛域名证书"><a href="#使用泛域名证书" class="headerlink" title="使用泛域名证书"></a>使用泛域名证书</h3><p><img src="https://alist.anliu.site/d/alist-ali/nginx-proxy-config-05.png"></p><p><img src="https://alist.anliu.site/d/alist-ali/nginx-proxy-config-06.png"></p><p><img src="https://alist.anliu.site/d/alist-ali/nginx-proxy-config-07.png"></p><p><img src="https://alist.anliu.site/d/alist-ali/nginx-proxy-config-08.png"></p><h3 id="在浏览器地址栏查看证书是否有效"><a href="#在浏览器地址栏查看证书是否有效" class="headerlink" title="在浏览器地址栏查看证书是否有效"></a>在浏览器地址栏查看证书是否有效</h3><p><img src="https://alist.anliu.site/d/alist-ali/nginx-proxy-config-09.png"></p><p>至此，你的网址已经可以正常使用免费的SSL证书啦。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> ssl </tag>
            
            <tag> 泛域名 </tag>
            
            <tag> 证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习web3-01</title>
      <link href="/2024/12/03/study-web3-01/"/>
      <url>/2024/12/03/study-web3-01/</url>
      
        <content type="html"><![CDATA[<p>本篇博客收集整理一些web3.0的学习资料和视频，由于web3在国外的系统学习资料较少（某种原因），所以资料也较为零散，希望大家一起学习，积极沟通分享。</p><h2 id="背景概述"><a href="#背景概述" class="headerlink" title="背景概述"></a>背景概述</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><blockquote><p>论你是做前端、后端、智能合约还是全栈，都需要了解 Web3 中的基本概念。其中包括：<code>Web3 原理、加密货币、区块链、钱包、交易所、区块链浏览器、智能合约、NFT、DApp、DAO、比特币底层原理及核心技术、以太坊底层原理及核心技术</code>。</p></blockquote><p>我们先了解一下专业术语有哪些：</p><ul><li><strong>Web3：</strong> 它是以太坊区块链 Ethereum blockchain 和智能合约 Smart Contracts 之间的连接。</li><li><strong>以太坊 Ethereum：</strong> 一个去中心化的开源区块链 blockchain，允许用户通过创建智能合约 creating smart contracts 与网络进行交互。它的原生加密货币是以太币。就市值而言，以太币是仅次于比特币的第二大最有价值的加密货币。它由 Vitalik Buterin 于 2013 年创建。</li><li><strong>智能合约 Smart Contracts ：</strong> 它们是存储在区块链上的计算机程序 computer programs ，在满足预定条件时运行。智能合约是用 Solidity 语言编写的。</li><li><strong>去中心化 Decentralized ：</strong> 数据状态不由中央实体 central entity、平台 platform 或个人 individual 收集</li><li><strong>区块链：</strong> 区块链网络是一种点对点连接，其中信息在多个设备之间共享，几乎不可能被黑客入侵。它是一种记录信息的系统，其方式使得很难或不可能更改保存在网络上的信息。</li><li><strong>Solidity：</strong> 一种用于编写智能合约 writing smart contracts 的面向对象 object-oriented 的编程语言。它用于在各种区块链平台上实施智能合约，最著名的是以太坊。Solidity 的语法类似于 javascript。要了解 Solidity，最好有 javascript 等编程语言的背景。直接跳入 Solidity 是一个坏主意</li><li><strong>Dapp：</strong> 代表去中心化应用程序 Decentralized App 。它们是在去中心化网络或区块链上运行其后端代码（主要用 Solidity 编写的智能合约）的应用程序。可以使用 react、vue 或 Angular 等前端框架构建 Dapps。</li><li><strong>Bitcoin 比特币：</strong> 世界上第一个被广泛应用的加密货币。</li><li><strong>Crypto:</strong> 又称 Cryptocurrency，加密货币，一种去中心化的数字货币。</li><li><strong>NFT：</strong> Non-Fungible Token，一种在链上被记录的、有所有权的数字资产。</li><li><strong>DAO：</strong> Decentralized Autonomous Organization，去中心化的自治组织。</li><li><strong>Metaverse 元宇宙：</strong> 一种由科技手段创造的虚拟世界的构想。</li><li><strong>DeFi Decentralized Finance：</strong> 去中心化金融系统。</li><li><strong>Token 代币：</strong> 可以理解为加密货币、NFT 等数字资产的统称。</li><li><strong>GameFi：</strong> Game + DeFi，中文说法链游，游戏中的金融系统可通过加密货币和 NFT 映射到现实。</li></ul><h3 id="区块链基础知识："><a href="#区块链基础知识：" class="headerlink" title="区块链基础知识："></a>区块链基础知识：</h3><blockquote><p>区块链是 Web3 的基础。你首先要了解它是如何工作的，以及它为什么会彻底改变我们交换商品和支付的方式。</p></blockquote><p>区块链技术不仅仅是和加密货币有关，而是已经成为真正的分布式云计算系统，能够运行完整的后端（为了和 web2.0 时代的后端进行区分，我有时也习惯称它为链端）来为前端的去中心化应用程序 (DApp) 提供动力。</p><p>在学习完区块链基础知识后，你应该能够准确回答出以下问题：</p><ul><li>Web1.0、Web2.0 和 Web3 的区别？</li><li>什么是区块链？</li><li>什么是分布式账本？</li><li>什么是加密货币？</li><li>什么是加密钱包？</li><li>什么是区块链浏览器？</li></ul><h3 id="去中心化应用基础知识："><a href="#去中心化应用基础知识：" class="headerlink" title="去中心化应用基础知识："></a>去中心化应用基础知识：</h3><p>当你了解了什么是区块链、Node、共识机制和这些技术的主要组件后，你应该会思考：“我可以使用区块链开发什么样的应用程序？”</p><p>建立在区块链之上的应用被称为去中心化应用或者被称为 DApp，它在大的结构上和传统 Web2.0 应用很像，包含两个部分：</p><ul><li>使用 JavaScript 或 React、Vue、Svelte 等框架/库构建的标准前端。</li><li>使用 Solidity/Solana/Rust 等语言构建的后端，它们建立在区块链之上。</li></ul><p>你除了要了解什么是去中心化应用，还要了解 DApp 的前端和后端是如何通信和交换数据的，你需要学习前端开发和后端开发，并且需要掌握 API 的基本原理。</p><h3 id="前端基础知识："><a href="#前端基础知识：" class="headerlink" title="前端基础知识："></a>前端基础知识：</h3><p>因为 DApp 也要有前端页面，所以你必须懂前端基础知识。这部分内容并不多。</p><ul><li>一款代码编辑器：VSCode。</li><li>三门必备网站编程语言：HTML、CSS、JavaScript。</li><li>一门非必选静态类型语言：TypeScript。</li></ul><h3 id="前端框架："><a href="#前端框架：" class="headerlink" title="前端框架："></a>前端框架：</h3><p>只学习前端基础知识确实能够开发一个 DApp 的前端，但要想 hold 住一个稍有规模的项目还是比较吃力的。这时需要学习一门框架。<br>目前大多数 Web3 项目都会采用 Next.js 框架，并使用 Vercel 部署。<br>而 Next.js 框架又基于 React 库。<br>所以这里你需要学习 React 和 Next.js。<br>当然你也可以学习 Vue、Angular、jQuery 这些库或者框架，但使用率没那么高，机会会少很多。</p><h3 id="后端基础知识："><a href="#后端基础知识：" class="headerlink" title="后端基础知识："></a>后端基础知识：</h3><p>任何一门编程语言都可以充当 Web3 的后端，可以学习 Nodejs、Go、Java。<br>这里推荐 Nodejs，因为是全栈，使用 Nodejs 的话可以前后端都只使用一门语言就可以了。</p><h3 id="后端框架："><a href="#后端框架：" class="headerlink" title="后端框架："></a>后端框架：</h3><p>Next.js 可以写一些 API，使用 Next.js 作为后端框架完全可以。<br>当然也可以选择其他语言的框架，比如 Nodejs 的 express、koa；Java 的 Spring；Go 的 gin、Iris 等。</p><h3 id="智能合约："><a href="#智能合约：" class="headerlink" title="智能合约："></a>智能合约：</h3><p>你需要掌握 Remix 编辑器的使用，Solidity 编程语言的使用。还要学会一些工具，比如 Hardhat、Waffle、Ganache 和 Truffle，它们可以帮我们更好的完成智能合约编译、测试和部署工作。你还需要学习 OpenZeppelin，它是一个很棒的 Solidity 库。<br>然后还需要学习各种协议标准以及它们的区别，比如 ERC20、ERC721 和 ERC1155 等。这是必不可少的基础。同时你还需要知道代理合约。</p><h3 id="智能合约交互："><a href="#智能合约交互：" class="headerlink" title="智能合约交互："></a>智能合约交互：</h3><p>智能合约交互需要学习 Web3.js、Ethers.js 和 Wagmi 这三个主流的库。如果你使用 TypeScript，还需要学会使用 typechain 这个库。<br>Ethers.js 是我认为目前最好的智能合约交互库。<br>如果你使用 Next.js + React + Typescript 进行开发，那么 Wagmi 是更好的选择。</p><h3 id="DApp："><a href="#DApp：" class="headerlink" title="DApp："></a>DApp：</h3><p>去中心化应用程序统称。</p><h2 id="文档资料"><a href="#文档资料" class="headerlink" title="文档资料"></a>文档资料</h2><p><a href="https://54web3.cc/blog/roadmap/learning-path-web3" title="web3学习路线">web3研习社团-web3学习路线</a></p><p><a href="https://github.com/jackchen0120/ethereum_book/blob/master/README.md">《精通以太坊–实现数字合约》中文版</a></p><p><a href="https://www.nextjs.cn/">Next.js官网</a></p><p><a href="https://soliditylang.org/">solidity官网</a></p><p><a href="https://cryptozombies.io/">通过玩游戏学会DApp</a></p><p>书记推荐：《精通比特币》《精通以太坊》，比其他畅销书质量高很多，都有中文版：<br><img src="https://alist.anliu.site/d/alist-ali/book-01.jpg"></p><h2 id="视频资料"><a href="#视频资料" class="headerlink" title="视频资料"></a>视频资料</h2><p><a href="https://youtu.be/HS_F8UTg61M?si=aYfzVzCz8OK4UUET">web3入门知识介绍-清华大学公开课</a></p><p><a href="https://youtu.be/edoCGxDty1k?si=-PYqZSQ-EXTfzEkg">web3入门概念介绍</a></p><h2 id="推荐web3的up主"><a href="#推荐web3的up主" class="headerlink" title="推荐web3的up主"></a>推荐web3的up主</h2><p>花果山大圣（b站、twitter、telegram）：前端、比较出名的web3从业者、up主，web3的资料telegram群(<a href="https://t.me/shengxj11/145990">https://t.me/shengxj11/145990</a>)</p><p>数字游牧人（b站up主）：前微软中国员工</p><p>polebug23（b站up主）：前腾讯员工</p><h2 id="推荐数字钱包"><a href="#推荐数字钱包" class="headerlink" title="推荐数字钱包"></a>推荐数字钱包</h2><p>小狐狸、欧意都是很不错的钱包，可以下载注册个试用一下。</p>]]></content>
      
      
      <categories>
          
          <category> Web3.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 博客 </tag>
            
            <tag> Web3.0 </tag>
            
            <tag> 远程工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于alist图床写博客</title>
      <link href="/2024/12/02/alist-typora-picgo/"/>
      <url>/2024/12/02/alist-typora-picgo/</url>
      
        <content type="html"><![CDATA[<p>如何在github pages上写博客？本篇介绍如何使用阿里云盘作为图床，写一篇markdown格式的博客，并实现引入本地图片自动上传到阿里云盘，并把md中图片路径自动调整为上传阿里云盘后的url地址。</p><h2 id="相关技术介绍"><a href="#相关技术介绍" class="headerlink" title="相关技术介绍"></a>相关技术介绍</h2><p><a href="https://docs.github.com/zh/pages" title="github pages">github pages</a>：存放在github上的文件可以直接配置github page成为静态文件服务器，可以直接通过域名访问。</p><p><a href="https://hexo.io/" title="hexo官网">hexo</a>：一个基于nodejs的生成静态页面的框架，支持各种主题，支持markdown格式的文件，编辑完可以一键发布成github pages。</p><p><a href="https://hexo.io/" title="alist 官网">alist</a>：当下一个流行的网盘管理方案，支持接入各种主流网盘和webdav，本篇举例的是阿里云盘。</p><p><a href="https://picgo.github.io/PicGo-Doc/" title="picgo 官网">picgo</a>：一个图床（永久存放图片的服务器，可以通过url地址访问图片）管理工具，有mac端linux和windows客户端，可以把图片文件直接上传到alist（本篇使用阿里云盘作为存放图片的位置）</p><p><a href="https://typora.io/" title="typora 官网">typora</a>：一个markdown编辑器，之所以使用typora，是因为typora可以直接调用pico，把本地的图片直接上传到alist并插入上传成功后的图片链接。</p><p>本博客地址内的所有文章均采用此方案编写。</p><h2 id="hexo-安装配置"><a href="#hexo-安装配置" class="headerlink" title="hexo 安装配置"></a>hexo 安装配置</h2><p>官网：<a href="https://hexo.io/" title="hexo官网">hexo</a><br>hexo安装参照官方文档即可，本人博客主题为matery，其它不做过多介绍。</p><h2 id="alist-安装配置"><a href="#alist-安装配置" class="headerlink" title="alist 安装配置"></a>alist 安装配置</h2><p>官网：<a href="https://hexo.io/" title="alist 官网">alist</a><br>alist安装参照官方文档即可，推荐使用docker方式安装，本人在nas上搭建了alist，所以选用docker方式安装。</p><p><strong>!注意：安装的时候要记录下自己安装的alist版本（是2还是3），后面配置picgo的时候要用到</strong></p><p>安装完毕后，参照官方文档接入<a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html">阿里云盘</a>。</p><h2 id="pico-安装配置"><a href="#pico-安装配置" class="headerlink" title="pico 安装配置"></a>pico 安装配置</h2><p>官网：<a href="https://picgo.github.io/PicGo-Doc/" title="picgo 官网">picgo</a><br>pico的安装参照官方文档，刚安装好的picgo并不是原生支持alist，需要安装第三方插件：<a href="">picgo-plugin-alist</a><br>刚安装好的picgo界面如下：<br><img src="https://alist.anliu.site/d/alist-ali/pico-install-01.png"></p><h3 id="1-安装picgo-plugin-alist插件："><a href="#1-安装picgo-plugin-alist插件：" class="headerlink" title="1. 安装picgo-plugin-alist插件："></a>1. 安装picgo-plugin-alist插件：</h3><p><a href="https://github.com/PicGo/Awesome-PicGo">官方插件列表</a>中查找<a href="https://github.com/PicGo/Awesome-PicGo">picgo-plugin-alist</a>插件，插件安装分为在线和离线安装</p><h4 id="方式一、在线安装"><a href="#方式一、在线安装" class="headerlink" title="方式一、在线安装"></a>方式一、在线安装</h4><p><img src="https://alist.anliu.site/d/alist-ali/pico-install-02.png"></p><h4 id="方式二、离线安装"><a href="#方式二、离线安装" class="headerlink" title="方式二、离线安装"></a>方式二、离线安装</h4><p>找到pico在机器上安装后的插件目录：</p><ul><li><p>Windows: %APPDATA%\picgo\</p></li><li><p>Linux: $XDG_CONFIG_HOME/picgo/ or ~/.config/picgo/</p></li><li><p>macOS: ~/Library/Application\ Support/picgo/</p></li></ul><p>在该目录打开命令行，然后执行命令：<br><code>npm install picgo-plugin-alist</code><br>成功安装后，显示如下：<br><img src="https://alist.anliu.site/d/alist-ali/pico-install-03.png"></p><h3 id="2-配置-picgo-plugin-alist-插件"><a href="#2-配置-picgo-plugin-alist-插件" class="headerlink" title="2. 配置 picgo-plugin-alist 插件"></a>2. 配置 <strong>picgo-plugin-alist</strong> 插件</h3><p><img src="https://alist.anliu.site/d/alist-ali/pico-install-04.png"><br><img src="https://alist.anliu.site/d/alist-ali/pico-install-05.png"><br><img src="https://alist.anliu.site/d/alist-ali/pico-install-06.png"></p><h3 id="3-获取alist的管理员token"><a href="#3-获取alist的管理员token" class="headerlink" title="3. 获取alist的管理员token"></a>3. 获取alist的管理员token</h3><p>在alist页面点击管理-设置-其它，<img src="https://alist.anliu.site/d/alist-ali/alist-install-01.png"><br><img src="https://alist.anliu.site/d/alist-ali/alist-install-02.png"></p><h2 id="typora-安装配置"><a href="#typora-安装配置" class="headerlink" title="typora 安装配置"></a>typora 安装配置</h2><p>官网：<a href="https://typora.io/" title="typora 官网">typora</a></p><p>双击安装typora，安装完毕后，进入设置页面</p><p><img src="https://alist.anliu.site/d/alist-ali/typora-install-01.png"></p><p>此时在markdown中插入本地图片就会自动调用picgo上传到alist中，上传成功后动态修改插入图片的地址为alist中上传图片的地址：</p><p><img src="https://alist.anliu.site/d/alist-ali/typora-install-02.png"></p><p><img src="https://alist.anliu.site/d/alist-ali/typora-install-03.png"></p><p>至此你可以拥有一个属于自己的阿里云盘的图床。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> hexo </tag>
            
            <tag> picgo </tag>
            
            <tag> typora </tag>
            
            <tag> alist </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嗨，暖暖</title>
      <link href="/2024/11/27/hai-nuan-nuan/"/>
      <url>/2024/11/27/hai-nuan-nuan/</url>
      
        <content type="html"><![CDATA[<p>暖暖呀，常常一句话我说了开头你就说了另一半，我们相拥而笑。如果存在是为了遇见你，那么我来了。</p><h2 id="絮絮叨叨"><a href="#絮絮叨叨" class="headerlink" title="絮絮叨叨"></a>絮絮叨叨</h2>]]></content>
      
      
      <categories>
          
          <category> Feeling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 两个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建日记</title>
      <link href="/2024/11/27/first-post/"/>
      <url>/2024/11/27/first-post/</url>
      
        <content type="html"><![CDATA[<p>终于在2024年11月27日19:02:00，基于github静态页面我搭建了自己的个人博客。</p><h2 id="主要介绍"><a href="#主要介绍" class="headerlink" title="主要介绍"></a>主要介绍</h2><p>虽然这个博客很简单，但是它是我自己的，我可以用它来记录我和暖暖的生活，记录我们的学习，记录我们的思考。</p><h2 id="主要技术"><a href="#主要技术" class="headerlink" title="主要技术"></a>主要技术</h2><ul><li>博客框架：Hexo</li><li>博客主题：Matery</li><li>评论系统：Livere</li><li>域名：腾讯云</li><li>加速：Cloudflare</li><li>服务器：Github Pages</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
